/*
 * This file is generated by jOOQ.
 */
package ru.sevsu.db.db.tables;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.sevsu.db.db.Db;
import ru.sevsu.db.db.tables.records.StudentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Student extends TableImpl<StudentRecord> {

    private static final long serialVersionUID = -2007944902;

    /**
     * The reference instance of <code>db.student</code>
     */
    public static final Student STUDENT = new Student();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentRecord> getRecordType() {
        return StudentRecord.class;
    }

    /**
     * The column <code>db.student.id</code>.
     */
    public final TableField<StudentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>db.student.fio</code>.
     */
    public final TableField<StudentRecord, String> FIO = createField("fio", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>db.student.grp_num</code>.
     */
    public final TableField<StudentRecord, Short> GRP_NUM = createField("grp_num", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>db.student.grants</code>.
     */
    public final TableField<StudentRecord, BigDecimal> GRANTS = createField("grants", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>db.student.prof_num</code>.
     */
    public final TableField<StudentRecord, Integer> PROF_NUM = createField("prof_num", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>db.student</code> table reference
     */
    public Student() {
        this(DSL.name("student"), null);
    }

    /**
     * Create an aliased <code>db.student</code> table reference
     */
    public Student(String alias) {
        this(DSL.name(alias), STUDENT);
    }

    /**
     * Create an aliased <code>db.student</code> table reference
     */
    public Student(Name alias) {
        this(alias, STUDENT);
    }

    private Student(Name alias, Table<StudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Student(Name alias, Table<StudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Student(Table<O> child, ForeignKey<O, StudentRecord> key) {
        super(child, key, STUDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Student as(String alias) {
        return new Student(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Student as(Name alias) {
        return new Student(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(String name) {
        return new Student(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(Name name) {
        return new Student(name, null);
    }
}
