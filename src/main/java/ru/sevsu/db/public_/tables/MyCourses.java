/*
 * This file is generated by jOOQ.
 */
package ru.sevsu.db.public_.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.sevsu.db.public_.Public;
import ru.sevsu.db.public_.tables.records.MyCoursesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MyCourses extends TableImpl<MyCoursesRecord> {

    private static final long serialVersionUID = -1904385285;

    /**
     * The reference instance of <code>public.my_courses</code>
     */
    public static final MyCourses MY_COURSES = new MyCourses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MyCoursesRecord> getRecordType() {
        return MyCoursesRecord.class;
    }

    /**
     * The column <code>public.my_courses.fio</code>.
     */
    public final TableField<MyCoursesRecord, String> FIO = createField("fio", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.my_courses.course_name</code>.
     */
    public final TableField<MyCoursesRecord, String> COURSE_NAME = createField("course_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.my_courses</code> table reference
     */
    public MyCourses() {
        this(DSL.name("my_courses"), null);
    }

    /**
     * Create an aliased <code>public.my_courses</code> table reference
     */
    public MyCourses(String alias) {
        this(DSL.name(alias), MY_COURSES);
    }

    /**
     * Create an aliased <code>public.my_courses</code> table reference
     */
    public MyCourses(Name alias) {
        this(alias, MY_COURSES);
    }

    private MyCourses(Name alias, Table<MyCoursesRecord> aliased) {
        this(alias, aliased, null);
    }

    private MyCourses(Name alias, Table<MyCoursesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MyCourses(Table<O> child, ForeignKey<O, MyCoursesRecord> key) {
        super(child, key, MY_COURSES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MyCourses as(String alias) {
        return new MyCourses(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MyCourses as(Name alias) {
        return new MyCourses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MyCourses rename(String name) {
        return new MyCourses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyCourses rename(Name name) {
        return new MyCourses(name, null);
    }
}
