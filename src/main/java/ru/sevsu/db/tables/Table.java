/*
 * This file is generated by jOOQ.
 */
package ru.sevsu.db.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.sevsu.db.Public;
import ru.sevsu.db.tables.records.TableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Table extends TableImpl<TableRecord> {

    private static final long serialVersionUID = -874980909;

    /**
     * The reference instance of <code>public.table</code>
     */
    public static final Table TABLE = new Table();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableRecord> getRecordType() {
        return TableRecord.class;
    }

    /**
     * The column <code>public.table.id</code>.
     */
    public final TableField<TableRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.table</code> table reference
     */
    public Table() {
        this(DSL.name("table"), null);
    }

    /**
     * Create an aliased <code>public.table</code> table reference
     */
    public Table(String alias) {
        this(DSL.name(alias), TABLE);
    }

    /**
     * Create an aliased <code>public.table</code> table reference
     */
    public Table(Name alias) {
        this(alias, TABLE);
    }

    private Table(Name alias, org.jooq.Table<TableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Table(Name alias, org.jooq.Table<TableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Table(org.jooq.Table<O> child, ForeignKey<O, TableRecord> key) {
        super(child, key, TABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Table as(String alias) {
        return new Table(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Table as(Name alias) {
        return new Table(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Table rename(String name) {
        return new Table(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Table rename(Name name) {
        return new Table(name, null);
    }
}
